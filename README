NAME
    Params::Util - Simple standalone param-checking functions

SYNOPSIS
      # Import some functions
      use Params::Util qw{_SCALAR _HASH _INSTANCE};
  
      sub foo {
          my $object  = _INSTANCE(shift, 'Foo') or return undef;
          my $image   = _SCALAR(shift)          or return undef;
          my $options = _HASH(shift)            or return undef;
          # etc...
      }

DESCRIPTION
    "Params::Util" provides a basic set of importable functions that makes
    checking parameters a hell of a lot easier.

    The functions provided by "Params::Util" check in the most strictly
    correct manner, and in should not be fooled by odd cases.

    To use, simply load the module providing the functions you want to use
    as arguments (as shown in the SYNOPSIS). For now, to aid in clarity and
    code maintenance, you will need to name the functions explicitly, rather
    than just importing everything.

FUNCTIONS
  _IDENTIFIER $string
    The "_IDENTIFIER" function is intended to be imported into your package,
    and provides a convenient way to test to see if a value is a string that
    is a valid Perl identifier.

    Returns the string as a convenience if it is a valid identifier, or
    "undef" if not.

  _CLASS $string
    The "_CLASS" function is intended to be imported into your package, and
    provides a convenient way to test to see if a value is a string that is
    a valid Perl class.

    This function only checks that the format is valid, not that the class
    is actually loaded. It also assumes "normalised" form, and does not
    accept class names such as "::Foo" or "D'Oh".

    Returns the string as a convenience if it is a valid class name, or
    "undef" if not.

  _SCALAR \$scalar
    The "_SCALAR" function is intended to be imported into your package, and
    provides a convenient way to test for a raw and unblessed "SCALAR"
    reference, with content of non-zero length.

    For a version that allows zero length "SCALAR" references, see the
    "_SCALAR0" function.

    Returns the "SCALAR" reference itself as a convenience, or "undef" if
    the value provided is not a "SCALAR" reference.

  _SCALAR0 \$scalar
    The "_SCALAR0" function is intended to be imported into your package,
    and provides a convenient way to test for a raw and unblessed "SCALAR0"
    reference, allowing content of zero-length.

    For a simpler "give me some content" version that requires non-zero
    length, "_SCALAR" function.

    Returns the "SCALAR" reference itself as a convenience, or "undef" if
    the value provided is not a "SCALAR" reference.

  _ARRAY $value
    The "_ARRAY" function is intended to be imported into your package, and
    provides a convenient way to test for a raw and unblessed "ARRAY"
    reference containing at least one element of any kind.

    For a more basic form that allows zero length ARRAY references, see the
    "_ARRAY0" function.

    Returns the "ARRAY" reference itself as a convenience, or "undef" if the
    value provided is not an "ARRAY" reference.

  _ARRAY0 $value
    The "_ARRAY0" function is intended to be imported into your package, and
    provides a convenient way to test for a raw and unblessed "ARRAY"
    reference, allowing "ARRAY" references that contain no elements.

    For a more basic "An array of something" form that also requires at
    least one element, see the "_ARRAY" function.

    Returns the "ARRAY" reference itself as a convenience, or "undef" if the
    value provided is not an "ARRAY" reference.

  _HASH $value
    The "_HASH" function is intended to be imported into your package, and
    provides a convenient way to test for a raw and unblessed "HASH"
    reference with at least one entry.

    For a version of this function that allows the "HASH" to be empty, see
    the "_HASH0" function.

    Returns the "HASH" reference itself as a convenience, or "undef" if the
    value provided is not an "HASH" reference.

  _HASH0 $value
    The "_HASH0" function is intended to be imported into your package, and
    provides a convenient way to test for a raw and unblessed "HASH"
    reference, regardless of the "HASH" content.

    For a simpler "A hash of something" version that requires at least one
    element, see the "_HASH" function.

    Returns the "HASH" reference itself as a convenience, or "undef" if the
    value provided is not an "HASH" reference.

  _CODE $value
    The "_CODE" function is intended to be imported into your package, and
    provides a convenient way to test for a raw and unblessed "CODE"
    reference.

    Returns the "CODE" reference itself as a convenience, or "undef" if the
    value provided is not an "CODE" reference.

  _INSTANCE $object, $class
    The "_INSTANCE" function is intended to be imported into your package,
    and provides a convenient way to test for an object of a particular
    class in a strictly correct manner.

    Returns the object itself as a convenience, or "undef" if the value
    provided is not an object of that type.

  _SET \@array, $class
    The "_SET" function is intended to be imported into your package, and
    provides a convenient way to test for set of at least one object of a
    particular class in a strictly correct manner.

    The set is provided as a reference to an "ARRAY" of objects of the class
    provided.

    For an alternative function that allows zero-length sets, see the
    "_SET0" function.

    Returns the "ARRAY" reference itself as a convenience, or "undef" if the
    value provided is not a set of that class.

  _SET0 \@array, $class
    The "_SET0" function is intended to be imported into your package, and
    provides a convenient way to test for set of objects of a particular
    class in a strictly correct manner, allowing for zero objects.

    The set is provided as a reference to an "ARRAY" of objects of the class
    provided.

    For an alternative function that requires at least one object, see the
    "_SET" function.

    Returns the "ARRAY" reference itself as a convenience, or "undef" if the
    value provided is not a set of that class.

TO DO
    - More comprehensive tests for _SET and _SET0

    - Would be nice if someone would re-implement in XS for me? :)

SUPPORT
    Bugs should be reported via the CPAN bug tracker at

    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Param-Util>

    For other issues, contact the author.

AUTHOR
    Adam Kennedy (Maintainer), <http://ali.as/>, cpan@ali.as

COPYRIGHT
    Copyright 2005 Adam Kennedy. All rights reserved. This program is free
    software; you can redistribute it and/or modify it under the same terms
    as Perl itself.

    The full text of the license can be found in the LICENSE file included
    with this module.

